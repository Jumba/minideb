#!/bin/bash

set -e
set -u
set -o pipefail

DISTS=${DISTS:-"bullseye
bookworm
trixie
latest
"}

BASENAME=${BASENAME:-bitnami/minideb}
DOCKER_REGISTRY=${DOCKER_REGISTRY:-"docker.io"}
# Space-separated list of architectures to include in the manifest.
# If an arch-specific image is missing remotely, it will be skipped.
PLATFORMS=${PLATFORMS:-amd64 arm64}
DRY_RUN=${DRY_RUN:-}
read -r -a ARCHS <<<"$PLATFORMS"

run_docker() {
    if [[ -n "${DRY_RUN:-}" ]]; then
        echo "DRY RUN docker ${*}"
    else
        docker "$@"
    fi
}

list_includes() {
    local list=""
    local element=""
    list=${1?You must provide a list}
    element=${2:?You must provide an element}
    for candidate in $list; do
        if [[ "$candidate" == "$element" ]]; then
            true
            return
        fi
    done
    false
    return
}

if [ -n "${DOCKER_PASSWORD:-}" ]; then
    echo "$DOCKER_PASSWORD" | run_docker login -u "$DOCKER_USERNAME" --password-stdin "${DOCKER_REGISTRY}"
fi

push_manifest() {
    local image=""
    local archs=()
    image="${1:?You must provide the image base to publish}"
    shift || true
    archs=("$@")
    local arch_images=()
    local inspected=()
    for arch in "${archs[@]}"; do
        local candidate="${image}-${arch}"
        # Only include arch image if it exists remotely
        if run_docker manifest inspect "$candidate" >/dev/null 2>&1; then
            arch_images+=("$candidate")
            inspected+=("$arch")
        else
            echo "::warning::Skipping missing image: $candidate"
        fi
    done
    if [[ ${#arch_images[@]} -eq 0 ]]; then
        echo "::warning::No arch images found for $image; skipping manifest creation"
        return 0
    fi
    echo "Creating multi-arch manifest for $image with arches: ${inspected[*]}"
    run_docker manifest create "$image" "${arch_images[@]}"
    run_docker manifest push "$image"
}

tags=()

for DIST in $DISTS; do
    tags+=("$DIST")
done

repositories=("${DOCKER_REGISTRY}/${BASENAME}")

for tag in "${tags[@]}"; do
    for repo in "${repositories[@]}"; do
        push_manifest "$repo:$tag" "${ARCHS[@]}"
    done
done
